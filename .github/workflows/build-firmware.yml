name: 编译Hi3798mv100固件（解决defconfig文件不存在问题）

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 拉取源码
        uses: actions/checkout@v4
        with:
          repository: zjkanjie/HiSTBLinuxV100R005C00SPC060
          path: HiSTBLinux

      - name: 安装依赖
        run: |
          sudo apt update
          sudo apt remove -y make
          wget http://archive.ubuntu.com/ubuntu/pool/main/m/make-dfsg/make_3.81-8.2ubuntu3_amd64.deb
          sudo dpkg -i make_3.81-8.2ubuntu3_amd64.deb
          sudo apt install -y gcc-arm-linux-gnueabihf gettext bison flex bc zlib1g-dev libncurses5-dev lzma git build-essential
          sudo ln -sf /bin/bash /bin/sh

      - name: 准备内核源码
        run: |
          cd HiSTBLinux
          mkdir -p third_party/open_source/
          wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.4.35.tar.gz -O third_party/open_source/linux-4.4.35.tar.gz
          rm -rf source/kernel/linux-4.4.y
          tar -zxf third_party/open_source/linux-4.4.35.tar.gz -C source/kernel/
          mv source/kernel/linux-4.4.35 source/kernel/linux-4.4.y

      - name: 修复环境变量
        run: |
          cd HiSTBLinux
          bash server_install.sh || echo "忽略非致命警告"
          # 手动生成env.sh确保变量正确
          cat > env.sh << 'EOF'
          export ARCH=arm
          export CROSS_COMPILE=arm-linux-gnueabihf-
          export PATH=/usr/bin:$PATH
          export SDK_PATH=$(pwd)
          EOF
          source ./env.sh
          echo "ARCH: $ARCH, CROSS_COMPILE: $CROSS_COMPILE"

      - name: 动态查找defconfig并生成.config（核心修复）
        run: |
          cd HiSTBLinux
          source ./env.sh
          # 1. 复制机型配置文件（cfg.mak）
          cp configs/hi3798mv100/hi3798mdmo1g_hi3798mv100_cfg.mak ./cfg.mak

          # 2. 列出configs目录内容，找到实际的defconfig文件名
          SDK_DEFCONFIG_DIR="configs/hi3798mv100"
          echo "=== SDK配置目录文件（寻找defconfig） ==="
          ls -la $SDK_DEFCONFIG_DIR
          # 查找包含"hi3798mv100"或"hi3798mdmo1g"的defconfig文件
          SDK_DEFCONFIG=$(find $SDK_DEFCONFIG_DIR -name "*.defconfig" | grep -E 'hi3798mv100|hi3798mdmo1g' | head -n1)

          # 3. 验证defconfig是否存在
          if [ -z "$SDK_DEFCONFIG" ] || [ ! -f "$SDK_DEFCONFIG" ]; then
            echo "Error: 未找到有效的defconfig文件"
            exit 1
          fi
          echo "找到defconfig：$SDK_DEFCONFIG"

          # 4. 复制defconfig到内核配置目录
          KERNEL_DIR="source/kernel/linux-4.4.y"
          DEFCONFIG_NAME=$(basename $SDK_DEFCONFIG)  # 使用实际文件名
          mkdir -p $KERNEL_DIR/arch/arm/configs/
          cp -f $SDK_DEFCONFIG $KERNEL_DIR/arch/arm/configs/
          echo "复制defconfig到内核目录：$KERNEL_DIR/arch/arm/configs/$DEFCONFIG_NAME"

          # 5. 生成.config（使用实际defconfig文件名）
          cd $KERNEL_DIR
          make ARCH=arm CROSS_COMPILE=$CROSS_COMPILE $DEFCONFIG_NAME V=1

          # 6. 验证.config是否生成
          if [ ! -f ".config" ]; then
            echo "Error: .config生成失败"
            exit 1
          else
            echo ".config生成成功"
          fi

      - name: 修复dtc并编译内核
        run: |
          cd HiSTBLinux/source/kernel/linux-4.4.y
          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- prepare
          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- scripts/dtc
          sed -i 's/^extern YYLTYPE yylloc;/#extern YYLTYPE yylloc;/' scripts/dtc/dtc-lexer.lex.c
          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j2

      - name: 编译固件
        run: |
          cd HiSTBLinux
          source ./env.sh
          make build -j4 2>&1 | tee build.log

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: hi3798mv100-firmware
          path: |
            HiSTBLinux/out/hi3798mv100/*
            HiSTBLinux/build.log
